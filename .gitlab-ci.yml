variables:
  SONAR_TOKEN: $SONAR_TOKEN
  SONAR_HOST_URL: $SONAR_HOST_URL
  GIT_DEPTH: 0
stages:
  - test
  - deploy
sonarqube-check:
  image: sonarsource/sonar-scanner-cli:4.4
  stage: test
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: false
  # when: manual
  only:
    # - manual
    - merge_requests
    #- /^sprint_.*$/
    - pushes
deploy_dev:
  image: alpine:3.15.0
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    # Cài openssh để dùng được sshpass
    - apk add --no-cache --update bash openssh rsync sshpass
    - sshpass -V

    # - eval $(ssh-agent -s)
    - export SSHPASS=$DEV_SSH_PASS

    # Pull code
    - sshpass -e ssh -t $DEV_SERVER_USER@$DEV_SERVER "cd $DEV_PATH && git pull && docker-compose exec -T app php artisan migrate"
  only:
    - develop
reset_data:
  image: alpine:3.15.0
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    # Cài openssh để dùng được sshpass
    - apk add --no-cache --update bash openssh rsync sshpass
    - sshpass -V

    # - eval $(ssh-agent -s)
    - export SSHPASS=$DEV_SSH_PASS

    # Pull code
    - sshpass -e ssh -t $DEV_SERVER_USER@$DEV_SERVER "cd $DEV_PATH && docker-compose exec -T app php artisan migrate:fresh && docker-compose exec -T app php artisan db:seed"
  when: manual
  only:
    - develop

